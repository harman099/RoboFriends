{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","Actions.js","Constants.js","Reducers.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","robots","isPending","filterRobots","filter","Robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4b3af9fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5\">\r\n      <img alt=\"Robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n//This is a pure/dumb component that uses just props\r\nconst CardList = ({ Robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tRobots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card key={Robots[i].id} \r\n\t\t\tid={Robots[i].id} \r\n\t\t\tname={Robots[i].name} \r\n\t\t\tusername={Robots[i].username} \r\n\t\t\temail={Robots[i].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t />\r\n\t\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox; ","import React from \"react\";\r\n\r\n//Children - So Scroll becomes parent of CardList therefore holds all the props of CardList\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", height: \"600px\" }}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooooooops</h1>\r\n\t\t}\r\n\t\treturn(\r\n\t\t\tthis.props.children\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry; ","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../Components/CardList.js\";\r\nimport SearchBox from \"../Components/SearchBox.js\";\r\nimport \"../Containers/App.css\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundry from \"../Components/ErrorBoundry.js\";\r\nimport { setSearchField, requestRobots } from \"../Actions\";\r\n\r\n//State is what describes the app. It is the thing that can change.\r\n//Usually lives in the parent Component.\r\n//Therefore it is a smart component with the class format instead of function\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filterRobots = robots.filter((Robot) => {\r\n      return Robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading..........</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList Robots={filterRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD, //CAPS cos Constant\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,\r\n\t\t\tpayload: data }))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,\r\n\t\t\tpayload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\nswitch(action.type){\r\n\tcase CHANGE_SEARCH_FIELD:\r\n\treturn {...state, searchField: action.payload}//using object spread operator\r\n\t//Object.assign({}, state, {searchField: action.payload})\r\n\tdefault:\r\n\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn {...state, isPending: true}\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn {...state, robots: action.payload, isPending: false}\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn {...state, error: action.payload, isPending: false}\r\n\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport App from \"./Containers/App.js\";\r\nimport { searchRobots, requestRobots } from \"./Reducers.js\";\r\nimport \"tachyons\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}