{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","name","email","id","username","className","alt","src","CardList","Robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","robots","isPending","filterRobots","filter","Robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e9f25855.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id, username}) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n\t\t\t<img alt ='Robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//This is a pure/dumb component that uses just props\r\nconst CardList = ({ Robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tRobots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card key={Robots[i].id} \r\n\t\t\tid={Robots[i].id} \r\n\t\t\tname={Robots[i].name} \r\n\t\t\tusername={Robots[i].username} \r\n\t\t\temail={Robots[i].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t />\r\n\t\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\n//Children - So Scroll becomes parent of CardList therefore holds all the props of CardList\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div \r\n\t\tstyle = {{overflowY:'scroll', \r\n\t\theight: '500px',\r\n\t}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooooooops</h1>\r\n\t\t}\r\n\t\treturn(\r\n\t\t\tthis.props.children\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry; ","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport '../Containers/App.css';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundry from '../Components/ErrorBoundry.js';\r\nimport {setSearchField, requestRobots} from '../Actions';\r\n\r\n//State is what describes the app. It is the thing that can change.\r\n//Usually lives in the parent Component.\r\n//Therefore it is a smart component with the class format instead of function\r\nconst mapStateToProps = (state) => {\r\n\treturn{\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn{\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filterRobots = robots.filter(Robot => {\r\n\t\t\treturn Robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn isPending ? <h1 className ='tc'>Loading..........</h1> :\r\n\t\t(\r\n\t\t<div className ='tc'>\r\n\t\t<h1 className= 'f1'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList Robots = {filterRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\t\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD, //CAPS cos Constant\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,\r\n\t\t\tpayload: data }))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,\r\n\t\t\tpayload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\nswitch(action.type){\r\n\tcase CHANGE_SEARCH_FIELD:\r\n\treturn {...state, searchField: action.payload}//using object spread operator\r\n\t//Object.assign({}, state, {searchField: action.payload})\r\n\tdefault:\r\n\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn {...state, isPending: true}\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn {...state, robots: action.payload, isPending: false}\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn {...state, error: action.payload, isPending: false}\r\n\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './Containers/App.js'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './Reducers.js';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store = {store}>\r\n\t<App />\r\n\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}